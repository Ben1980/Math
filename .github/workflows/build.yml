# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job:
    name: ${{ matrix.os }}-hosted-cmakesettingsjson-cache-submod_vcpkg
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            configuration: 'Linux.*'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - uses: lukka/get-cmake@latest
      
      - name: Set vcpkg's response file path used as part of cache's key.
        uses: lukka/set-shell-env@master
        with:
          VCPKGRESPONSEFILE: ${{ github.workspace }}/cmakesettingsjson/vcpkg_${{ matrix.triplet }}.txt
          filter: VCPKGRESPONSEFILE
          
      - name: Restore artifacts, run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          vcpkgArguments: '@${{ env.VCPKGRESPONSEFILE }}'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          # Ensure the cache key changes any time the content of the response file changes.
          appendedCacheKey: ${{ hashFiles( env.VCPKGRESPONSEFILE ) }}
      
      - name: Prints output of run-vcpkg's task
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}' "
        
      - name: Install vcpkg dependencies
        run: |
          $VCPKG_ROOT/vcpkg install fmt doctest
          shell: bash
      
      - name: Create build directories
        run: |
             mkdir -p build
             mv buildutils build/buildutils
             
      - name: Setup cmake and build artifacts
        run: |
             cd build
             cmake -DCMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake ..
             cmake --build . --config Release
             
